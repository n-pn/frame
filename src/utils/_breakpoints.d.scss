/// screen breakpoints

// variables

$m-screen-xs: rem(320px) !default;
$m-screen-sm: rem(360px) !default;
$m-screen-md: rem(600px) !default;
$m-screen-lg: rem(840px) !default;
$m-screen-xl: rem(1080px) !default;
$m-screen-x2: rem(1320px) !default; // reserved
$m-screen-x3: rem(1560px) !default; // reserved

$m-screen-sizes: (
  xs: $m-screen-xs,
  sm: $m-screen-sm,
  md: $m-screen-md,
  lg: $m-screen-lg,
  xl: $m-screen-xl,
  x2: $m-screen-x2,
  x3: $m-screen-x3,
) !default;

$m-screen-names: map-keys($m-screen-sizes);

// functions

@function screen-size($key) {
  $val: map-get($m-screen-sizes, $key);

  @if not $val {
    @warn "custom screen size [#{$key}] is not recommended";
    @return $key;
  }

  @return $val;
}

// mixins

@mixin screen-min($min: sm) {
  @if $min == null or $min == xs {
    @content;
  } @else {
    $size: screen-size($min);
    @media screen and (min-width: $size) {
      @content;
    }
  }
}

@mixin screen-max($max: xl) {
  @if $max == null {
    @content;
  } @else {
    $size: screen-size($max) - rem(1px);
    @media screen and (max-width: $size) {
      @content;
    }
  }
}

@mixin breakpoint($min: sm, $max: xl) {
  $size-min: screen-size($min);
  $size-max: screen-size($max) - rem(1px);
  @media screen and (min-width: $size-min) and (max-width: $size-max) {
    @content;
  }
}

// primary

@mixin props(
  $props,
  $xs: null,
  $sm: null,
  $md: null,
  $lg: null,
  $xl: null,
  $df: null
) {
  $bp-map: $xs;

  @if type-of($xs) != map {
    $bp-map: (
      xs: $xs or $df,
      sm: $sm or $df,
      md: $md or $df,
      lg: $lg or $df,
      xl: $xl or $df,
    );
  }

  $old: null;

  @if type-of($props) != list {
    $props: ($props);
  }

  @each $key, $val in $bp-map {
    @if ($val and $val != $old) {
      @include screen-min($key) {
        @each $prop in $props {
          #{$prop}: $val;
        }
      }
    }

    $old: $val;
  }
}
