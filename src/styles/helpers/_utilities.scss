@import 'variables';

// caculate size from base cell size
@function cell($size, $base: 0.75rem) {
  @return $size * $base;
}

// convert px to rem
@function rem($size, $base: 16) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  @if unitless($base) {
    $base: $base * 1px;
  }
  @return $size / $base * 1rem;
}

// convert px to em
@function em($size, $base: 16) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  @if unitless($base) {
    $base: $base * 1px;
  }
  @return $size / $base * 1em;
}

@function f-map-get($map, $key, $default: null) {
  $val: map-get($map, $key);
  @if $val == null {
    @return $default;
  } @else {
    @return $val;
  }
}

// get color by name and tone
@function f-color($color, $tone: 5) {
  @if map-has-key($m-color-aliases, $color) {
    $color: map-get($m-color-aliases, $color);
  } @else if not map-has-key($m-color-palette, $color) {
    @return $color;
  }

  @if $color == black or $color == white {
    @return map-get($m-palette, $color);
  } @else if $tone < 1 or $tone > 9 {
    @warn "color tone should be in range 1..9";
    $tone: 5;
  }

  $_colors: map-get($m-color-palette, $color);
  @return map-get($_colors, $tone);
}

// color mixin
@mixin color($color, $tone: 5) {
  color: f-color($color, $tone);
}

// background color mixin
@mixin bgcolor($color: gray, $tone: 1) {
  background-color: f-color($color, $tone);
}

// corners

@mixin corner($pos: all, $radius: md) {
  @if $radius == sm {
    $radius: $m-radius-sm;
  } @else if $radius == md {
    $radius: $m-radius-md;
  } @else if $radius == lg {
    $radius: $m-radius-lg;
  } @else if $radius == full {
    $radius: $m-radius-full;
  }

  @if pos == top {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  } @else if pos == bottom {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
  } @else if pos == left {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  } @else if pos == right {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  } @else @if pos == top left {
    border-top-left-radius: $radius;
  } @else if pos == top right {
    border-top-right-radius: $radius;
  } @else if pos == bottom left {
    border-bottom-left-radius: $radius;
  } @else if pos == bottom right {
    border-bottom-right-radius: $radius;
  } @else {
    border-radius: $radius;
  }
}

// borders

@mixin bdcolor($color: gray, $tone: 3) {
  border-color: f-color($color, $tone);
}

@mixin bdwidth($width: 1px) {
  @if $width == 0 or $width == 2 or $width == 4 or $width == 8 {
    border-width: rem($width);
  } @else {
    border-width: $width;
  }
}

@mixin border($color, $width: 1px) {
  border-color: $color;
  border-width: $width;
}

@mixin border-left($color, $width: 1px) {
  border-color: $color;
  border-left-width: $width;
}

@mixin border-right($color, $width: 1px) {
  border-color: $color;
  border-right-width: $width;
}

@mixin border-top($color, $width: 1px) {
  border-color: $color;
  border-top-width: $width;
}

@mixin border-bottom($color, $width: 1px) {
  border-color: $color;
  border-bottom-width: $width;
}

// fonts
@mixin font-family($family: sans) {
  @if $family == null or $family == sans {
    font-family: $m-font-sans;
  } @else if $family == narrow {
    font-family: $m-font-narrow;
  } @else if $family == mono {
    font-family: $m-font-mono;
  } @else {
    font-family: $family, $m-font-sans;
  }
}

@mixin font-size($size: md) {
  font-size: f-map-get($m-font-sizes, $size, $size);
}

// shadows

@mixin shadow($type: sm) {
  @if type == xs {
    box-shadow: $m-shadow-xs;
  } @else if type == sm {
    box-shadow: $m-shadow-sm;
  } @else if type == md {
    box-shadow: $m-shadow-md;
  } @else if type == lg {
    box-shadow: $m-shadow-lg;
  } @else if type == xl {
    box-shadow: $m-shadow-xl;
  } @else if type == xxl {
    box-shadow: $m-shadow-xxl;
  } @else if type == inner {
    box-shadow: $m-shadow-inner;
  } @else if type == outline {
    box-shadow: $m-shadow-outline;
  } @else {
    box-shadow: $type;
  }
}

// media query

@mixin min-width($size: tablet) {
  @if $size == phone {
    @media only screen and (min-width: #{$m-screen-phone}) {
      @content;
    }
  } @else if $size == phablet {
    @media only screen and (min-width: #{$m-screen-phablet}) {
      @content;
    }
  } @else if $size == tablet {
    @media only screen and (min-width: #{$m-screen-tablet}) {
      @content;
    }
  } @else if $size == laptop {
    @media only screen and (min-width: #{$m-screen-laptop}) {
      @content;
    }
  } @else if $size == desktop {
    @media only screen and (min-width: #{$m-screen-desktop}) {
      @content;
    }
  } @else {
    @media only screen and (min-width: #{$size}) {
      @content;
    }
  }
}
