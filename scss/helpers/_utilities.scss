@import 'variables';

// caculate size from base cell size
@function cell($size, $base: 0.75rem) {
  @return $size * $base;
}

// convert px to rem
@function rem($size, $base: 16) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  @if unitless($base) {
    $base: $base * 1px;
  }
  @return $size / $base * 1rem;
}

// convert px to em
@function em($size, $base: 16) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  @if unitless($base) {
    $base: $base * 1px;
  }
  @return $size / $base * 1em;
}

@function f-map-get($map, $key, $default: null) {
  $val: map-get($map, $key);
  @if $val == null {
    @return $default;
  } @else {
    @return $val;
  }
}

// get color by name and tone
@function f-color($color, $tone: 5) {
  @if map-has-key($m-color-aliases, $color) {
    $color: map-get($m-color-aliases, $color);
  } @else if not map-has-key($m-color-palette, $color) {
    @return $color;
  }

  @if $color == black or $color == white {
    @return map-get($m-color-palette, $color);
  } @else if $tone < 1 or $tone > 9 {
    @warn "color tone should be in range 1..9";
    $tone: 5;
  }

  $_colors: map-get($m-color-palette, $color);
  @return map-get($_colors, $tone);
}

// color mixin
@mixin color($color, $tone: 5) {
  color: f-color($color, $tone);
}

// background color mixin
@mixin bgcolor($color: gray, $tone: 1) {
  background-color: f-color($color, $tone);
}

// corners

@mixin corner($radius: md, $pos: all) {
  @if $radius == sm {
    $radius: $m-radius-sm;
  } @else if $radius == md {
    $radius: $m-radius-md;
  } @else if $radius == lg {
    $radius: $m-radius-lg;
  } @else if $radius == full {
    $radius: $m-radius-full;
  }

  @if $pos == top {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  } @else if $pos == bottom {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
  } @else if $pos == left {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  } @else if $pos == right {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  } @else if $pos == top-left {
    border-top-left-radius: $radius;
  } @else if $pos == top-right {
    border-top-right-radius: $radius;
  } @else if $pos == bottom-left {
    border-bottom-left-radius: $radius;
  } @else if $pos == bottom-right {
    border-bottom-right-radius: $radius;
  } @else {
    border-radius: $radius;
  }
}

// borders

@mixin bdcolor($color: gray, $tone: 3) {
  border-color: f-color($color, $tone);
}

@mixin bdwidth($width: 1px) {
  @if $width == 0 or $width == 2 or $width == 4 or $width == 8 {
    border-width: rem($width);
  } @else {
    border-width: $width;
  }
}

@mixin border($color, $width: 1px) {
  border-color: $color;
  border-width: $width;
}

@mixin border-left($color, $width: 1px) {
  border-color: $color;
  border-left-width: $width;
}

@mixin border-right($color, $width: 1px) {
  border-color: $color;
  border-right-width: $width;
}

@mixin border-top($color, $width: 1px) {
  border-color: $color;
  border-top-width: $width;
}

@mixin border-bottom($color, $width: 1px) {
  border-color: $color;
  border-bottom-width: $width;
}

// fonts

@mixin font-family($family: sans) {
  @if $family == null or $family == sans {
    font-family: $m-font-sans;
  } @else if $family == narrow {
    font-family: $m-font-narrow;
  } @else if $family == mono {
    font-family: $m-font-mono;
  } @else {
    font-family: $family, $m-font-sans;
  }
}

@mixin font-weight($weight: bold) {
  font-weight: $weight;
}

@mixin font-size($size: md) {
  font-size: f-map-get($m-font-sizes, $size, $size);
}

// shadows

@mixin shadow($type: sm) {
  @if $type == xs {
    box-shadow: $m-shadow-xs;
  } @else if $type == sm {
    box-shadow: $m-shadow-sm;
  } @else if $type == md {
    box-shadow: $m-shadow-md;
  } @else if $type == lg {
    box-shadow: $m-shadow-lg;
  } @else if $type == xl {
    box-shadow: $m-shadow-xl;
  } @else if $type == xxl {
    box-shadow: $m-shadow-xxl;
  } @else if $type == inner {
    box-shadow: $m-shadow-inner;
  } @else if $type == outline {
    box-shadow: $m-shadow-outline;
  } @else {
    box-shadow: $type;
  }
}

// media query

@mixin min-width($size: tablet) {
  @if $size == phone {
    @media only screen and (min-width: #{$m-screen-phone}) {
      @content;
    }
  } @else if $size == phablet {
    @media only screen and (min-width: #{$m-screen-phablet}) {
      @content;
    }
  } @else if $size == tablet {
    @media only screen and (min-width: #{$m-screen-tablet}) {
      @content;
    }
  } @else if $size == laptop {
    @media only screen and (min-width: #{$m-screen-laptop}) {
      @content;
    }
  } @else if $size == desktop {
    @media only screen and (min-width: #{$m-screen-desktop}) {
      @content;
    }
  } @else {
    @media only screen and (min-width: #{$size}) {
      @content;
    }
  }
}

// Gradients

@mixin gradient-bg($color) {
  @if $enable-gradients {
    background: $color
      linear-gradient(180deg, mix($body-bg, $color, 15%), $color)
      repeat-x;
  } @else {
    background-color: $color;
  }
}

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and $position for each color stop.
@mixin gradient-x(
  $start-color: $gray-700,
  $end-color: $gray-800,
  $start-percent: 0%,
  $end-percent: 100%
) {
  background-image: linear-gradient(
    to right,
    $start-color $start-percent,
    $end-color $end-percent
  );
  background-repeat: repeat-x;
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and $position for each color stop.
@mixin gradient-y(
  $start-color: $gray-700,
  $end-color: $gray-800,
  $start-percent: 0%,
  $end-percent: 100%
) {
  background-image: linear-gradient(
    to bottom,
    $start-color $start-percent,
    $end-color $end-percent
  );
  background-repeat: repeat-x;
}

@mixin gradient-directional(
  $start-color: $gray-700,
  $end-color: $gray-800,
  $deg: 45deg
) {
  background-image: linear-gradient($deg, $start-color, $end-color);
  background-repeat: repeat-x;
}
@mixin gradient-x-three-colors(
  $start-color: $blue,
  $mid-color: $purple,
  $color-stop: 50%,
  $end-color: $red
) {
  background-image: linear-gradient(
    to right,
    $start-color,
    $mid-color $color-stop,
    $end-color
  );
  background-repeat: no-repeat;
}
@mixin gradient-y-three-colors(
  $start-color: $blue,
  $mid-color: $purple,
  $color-stop: 50%,
  $end-color: $red
) {
  background-image: linear-gradient(
    $start-color,
    $mid-color $color-stop,
    $end-color
  );
  background-repeat: no-repeat;
}
@mixin gradient-radial($inner-color: $gray-700, $outer-color: $gray-800) {
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba($white, 0.15), $angle: 45deg) {
  background-image: linear-gradient(
    $angle,
    $color 25%,
    transparent 25%,
    transparent 50%,
    $color 50%,
    $color 75%,
    transparent 75%,
    transparent
  );
}

// hovers

@mixin hoverable {
  @media (hover: hover) {
    @content;
  }
}

@mixin not-hoverable {
  @media not all and (hover: none) {
    @content;
  }
}

@mixin hover {
  @include hoverable {
    &:hover {
      @content;
    }
  }
}

@mixin hover-focus {
  @include hoverable {
    &:hover,
    &:focus {
      @content;
    }
  }
}

@mixin plain-hover-focus {
  @include hoverable {
    &,
    &:hover,
    &:focus {
      @content;
    }
  }
}

@mixin hover-focus-active {
  @include hoverable {
    &:hover,
    &:focus,
    &:active {
      @content;
    }
  }
}

// Image Mixins
// - Responsive image
// - Retina image

// Responsive image
//
// Keep images from scaling beyond the width of their parents.

@mixin image-fluid {
  // Part 1: Set a maximum relative to the parent
  max-width: 100%;
  // Part 2: Override the height to auto, otherwise images will be stretched
  // when setting a width and height attribute on the img element.
  height: auto;
}

// Retina image
//
// Short retina mixin for setting background-image and -size.

@mixin image-retina($file-1x, $file-2x, $width-1x: 100%, $height-1x: 100%) {
  background-image: url($file-1x);
  @media only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx) {
    background-image: url($file-2x);
    background-size: $width-1x $height-1x;
  }
}

// Sizing shortcuts

@mixin sizing($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin height($size) {
  height: $size;
  line-height: $size;
}

// Text truncate
// Requires inline-block or block for proper styling

@mixin truncate($width: 100%) {
  width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// resets

@mixin reset-list {
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin reset-link {
  color: inherit;
  text-decoration: none;
  background-color: transparent;
  border: none;
  &:hover {
    color: inherit;
    text-decoration: none;
    background-color: transparent;
    border: none;
  }
}

// clearfix
@mixin clearfix {
  &:after {
    content: ' ';
    display: block;
    clear: both;
  }
}
